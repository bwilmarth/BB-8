// Include Libraries
// RF24 Library
#include <SPI.h>  
#include "RF24.h"
// RF24 Definitions
#define CE_PIN 9
#define CSN_PIN 10
// Create RF24 Object
RF24 radio(CE_PIN, CSN_PIN);

// MPU6050 Library and Declarations
#include <I2Cdev.h>
#include "MPU6050_6Axis_MotionApps20.h"
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
    #include "Wire.h"
#endif
#define OUTPUT_READABLE_YAWPITCHROLL
// Create MPU6050 object
MPU6050 mpu;

// PID Loop Library
#include <PID_v1.h>

// Motorshield Library and Declarations
#include <Wire.h>
#include <Adafruit_MotorShield.h>
Adafruit_MotorShield AFMS = Adafruit_MotorShield();
Adafruit_DCMotor *rMotor = AFMS.getMotor(3);
Adafruit_DCMotor *lMotor = AFMS.getMotor(4);

// Define Variables
// MPU6050 Variables
// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer
// Orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorInt16 aa;         // [x, y, z]            accel sensor measurements
VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
VectorFloat gravity;    // [x, y, z]            gravity vector
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector

// PID Loop variables
// Define Variables we'll be connecting to
double Setpoint, Input, Output;
// Specify the links and initial tuning parameters
double Kp=4, Ki=.1, Kd=0;
PID myPID(&Input, &Output, &Setpoint, Kp, Ki, Kd, DIRECT);

// RF24 Variables
byte addresses[][6] = {"1Node", "2Node"}; // These will be the names of the "Pipes"
struct dataStruct {
  unsigned long _micros;  // to save response times
  int X1_pos;             // The Joystick position values
  int Y1_pos;
  //int X2_pos;
  //int Y2_pos;
  //bool switchOn;        // The Joystick push-down switch
} myData;                 // This can be accessed in the form: myData.X1_pos   etc.
int X1_value;
int Y1_value;
int motorTurn;
int motorPitch;



// ================================================================ //
// ===                      INITIAL SETUP                       === //
// ================================================================ //

void setup() {
  Serial.println(F("IT'S WORKING!"));
  //Initialize for motors
  initMotors();
  //Initialize for gyro
  initMPU6050();
  //Initialize for RF24
  initRF24();
  //Initialize for PID loop
  Setpoint = 0;
  myPID.SetMode(AUTOMATIC);
  myPID.SetOutputLimits(-255,255);
}



// ================================================================ //
// ===                        MAIN LOOP                         === //
// ================================================================ //

void loop() {
  double Pitch_value = getPitch();
  double motorSpeed = map(Pitch_value, -50, 50, -255, 255);
  /*// Start PID routine
  Input = getPitch();
  myPID.Compute();
  double motorSpeed = Output;*/
  /*// Print PID routine
  Serial.print(F("Input= "));
  Serial.print(Input);
  Serial.print("\t");
  Serial.print(F("Output= "));
  double motorSpeed = Output;
  printDouble(Output, 100);
  Serial.println();*/

  // RF24 communication and control
  if ( radio.available())
  {
    while (radio.available())   // While there is data ready to be retrieved from the receive pipe
    {
      radio.read( &myData, sizeof(myData) );             // Get the data
    }

    // Write back to confirm connection
    radio.stopListening();                               // First, stop listening so we can transmit
    radio.write( &myData, sizeof(myData) );              // Send the received data back.
    radio.startListening();                              // Now, resume listening so we catch the next packets.

    // Get values from controller and map them
    X1_value = map (myData.X1_pos, 0, 1023, -340, 340);
    Y1_value = map (myData.Y1_pos, 0, 1023, -340, 340);

    // Add dead spot
    if (X1_value > 85){
       motorTurn = X1_value - 86;
    }
    else if (X1_value < -85){
       motorTurn = X1_value + 86;
    }
    else {
       motorTurn = 0;
    }
    if (Y1_value > 85){
      motorPitch = Y1_value - 86;
    }
    else if (Y1_value < -85){
      motorPitch = Y1_value + 86;
    }
    else {
      motorPitch = 0;
    }

    // Print values from controller
    Serial.print(F("X1= "));
    Serial.print(motorTurn);
    Serial.print("   \t");
    Serial.print(F("Y1= "));
    Serial.print(motorPitch);
    Serial.print("   \t");
    Serial.print(F("X1_raw= "));
    Serial.print(myData.X1_pos);
    Serial.print("   \t");
    Serial.print(F("Y1_raw= "));
    Serial.print(myData.Y1_pos);
    Serial.print("   \t");
    /*// Print values from PID
    Serial.print(F("Input= "));
    Serial.print(Input);
    Serial.print("\t");
    Serial.print(F("Output= "));
    printDouble(Output, 100);
    Serial.println();*/
    // Print motorSpeed
    Serial.print(F("Motors= "));
    printDouble(motorSpeed, 100);
    Serial.println();
    
    // Start Movement Routine
    // Forward/Backwards
    if (motorPitch >= 5){
      rMotor->run(BACKWARD);
      rMotor->setSpeed(motorPitch);
      lMotor->run(BACKWARD);
      lMotor->setSpeed(motorPitch);
    }
    else if (motorPitch < -5){
      rMotor->run(FORWARD);
      rMotor->setSpeed(0-motorPitch);
      lMotor->run(FORWARD);
      lMotor->setSpeed(0-motorPitch);
    }
    else{
    // Rotate Right/Left
      if(motorTurn > 5){
        rMotor->run(FORWARD);
        rMotor->setSpeed(motorTurn);
        lMotor->run(BACKWARD);
        lMotor->setSpeed(motorTurn);
      }
      else if(motorTurn < -5){
        rMotor->run(BACKWARD);
        rMotor->setSpeed(0-motorTurn);
        lMotor->run(FORWARD);
        lMotor->setSpeed(0-motorTurn);
      }
      else{
    // If in dead spot, Stabilize
        if(motorSpeed > 0){
          rMotor->run(FORWARD);
          lMotor->run(FORWARD);
          rMotor->setSpeed(motorSpeed);
          lMotor->setSpeed(motorSpeed);
        }
        else{
          rMotor->run(BACKWARD);
          lMotor->run(BACKWARD);
          rMotor->setSpeed(0-motorSpeed);
          lMotor->setSpeed(0-motorSpeed);
        }
      }
    }
  }
}



// ================================================================ //
// ===                  printDouble function                    === //
// ================================================================ //

void printDouble( double val, unsigned int precision){
// prints val with number of decimal places determine by precision
// NOTE: precision is 1 followed by the number of zeros for the desired number of decimial places
// example: printDouble( 3.1415, 100); // prints 3.14 (two decimal places)

   Serial.print (int(val));  //prints the int part
   Serial.print("."); // print the decimal point
   unsigned int frac;
   if(val >= 0)
       frac = (val - int(val)) * precision;
   else
       frac = (int(val)- val ) * precision;
   Serial.println(frac,DEC) ;
}



// ================================================================ //
// ===               INTERRUPT DETECTION ROUTINE  MPU 6050      === //
// ================================================================ //

volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
    mpuInterrupt = true;
}



// ================================================================ //
// ===                 initMPU6050 function                     === //
// ================================================================ //

void initMPU6050(void){
    // join I2C bus (I2Cdev library doesn't do this automatically)
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
        TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz)
    #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
        Fastwire::setup(400, true);
    #endif

    // initialize serial communication
    // (115200 chosen because it is required for Teapot Demo output, but it's
    // really up to you depending on your project)
    Serial.begin(115200);
    while (!Serial); // wait for Leonardo enumeration, others continue immediately

    // NOTE: 8MHz or slower host processors, like the Teensy @ 3.3v or Ardunio
    // Pro Mini running at 3.3v, cannot handle this baud rate reliably due to
    // the baud timing being too misaligned with processor ticks. You must use
    // 38400 or slower in these cases, or use some kind of external separate
    // crystal solution for the UART timer.

    // initialize device
    Serial.println(F("Initializing I2C devices..."));
    mpu.initialize();

    // verify connection
    Serial.println(F("Testing device connections..."));
    Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));

    /* wait for ready
    Serial.println(F("\nSend any character to begin DMP programming and demo: "));
    while (Serial.available() && Serial.read()); // empty buffer
    while (!Serial.available());                 // wait for data
    while (Serial.available() && Serial.read()); // empty buffer again
    */

    // load and configure the DMP
    Serial.println(F("Initializing DMP..."));
    devStatus = mpu.dmpInitialize();

    // supply your own gyro offsets here, scaled for min sensitivity
    mpu.setXGyroOffset(220);
    mpu.setYGyroOffset(76);
    mpu.setZGyroOffset(-85);
    mpu.setZAccelOffset(1788); // 1688 factory default for my test chip

    // make sure it worked (returns 0 if so)
    if (devStatus == 0) {
        // turn on the DMP, now that it's ready
        Serial.println(F("Enabling DMP..."));
        mpu.setDMPEnabled(true);

        // enable Arduino interrupt detection
        Serial.println(F("Enabling interrupt detection (Arduino external interrupt 0)..."));
        attachInterrupt(0, dmpDataReady, RISING);
        mpuIntStatus = mpu.getIntStatus();

        // set our DMP Ready flag so the main loop() function knows it's okay to use it
        Serial.println(F("DMP ready! Waiting for first interrupt..."));
        dmpReady = true;

        // get expected DMP packet size for later comparison
        packetSize = mpu.dmpGetFIFOPacketSize();
    } else {
        // ERROR!
        // 1 = initial memory load failed
        // 2 = DMP configuration updates failed
        // (if it's going to break, usually the code will be 1)
        Serial.print(F("DMP Initialization failed (code "));
        Serial.print(devStatus);
        Serial.println(F(")"));
    }
}



// ================================================================ //
// ===                  getPitch function                       === //
// ================================================================ //

double getPitch(void){
    double pitch = 0;
    
    // if programming failed, don't try to do anything
    if (dmpReady){

    // wait for MPU interrupt or extra packet(s) available
    while (!mpuInterrupt && fifoCount < packetSize) {
        // other program behavior stuff here
        // .
        // .
        // .
        // if you are really paranoid you can frequently test in between other
        // stuff to see if mpuInterrupt is true, and if so, "break;" from the
        // while() loop to immediately process the MPU data
        // .
        // .
        // .
    }

    // reset interrupt flag and get INT_STATUS byte
    mpuInterrupt = false;
    mpuIntStatus = mpu.getIntStatus();

    // get current FIFO count
    fifoCount = mpu.getFIFOCount();

    // check for overflow (this should never happen unless our code is too inefficient)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
        // reset so we can continue cleanly
        mpu.resetFIFO();
        Serial.println(F("FIFO overflow!"));

    // otherwise, check for DMP data ready interrupt (this should happen frequently)
    } else if (mpuIntStatus & 0x02) {
        // wait for correct available data length, should be a VERY short wait
        while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

        // read a packet from FIFO
        mpu.getFIFOBytes(fifoBuffer, packetSize);
        
        // track FIFO count here in case there is > 1 packet available
        // (this lets us immediately read more without waiting for an interrupt)
        fifoCount -= packetSize;
        
        //#ifdef OUTPUT_READABLE_YAWPITCHROLL
            // display Euler angles in degrees
            mpu.dmpGetQuaternion(&q, fifoBuffer);
            mpu.dmpGetGravity(&gravity, &q);
            mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
            pitch = (ypr[1] * 180/M_PI);
 
            //delay(100);
        //#endif
    }
    }
    return pitch;
}



// ================================================================ //
// ===                   initRF24 function                      === //
// ================================================================ //

void initRF24(void){
  //Serial.begin(115200);
  radio.begin();
  radio.setChannel(108);
  radio.setDataRate(RF24_250KBPS);
  radio.setPALevel(RF24_PA_MAX);
  // PALevelcan be one of four levels: RF24_PA_MIN, RF24_PA_LOW, RF24_PA_HIGH and RF24_PA_MAX

  // Open a writing and reading pipe on each radio, with opposite addresses
  radio.openWritingPipe(addresses[1]);
  radio.openReadingPipe(1, addresses[0]); 
  
  // Start the radio listening for data
  radio.startListening();
}



// ================================================================ //
// ===                   initMotors function                    === //
// ================================================================ //

void initMotors(void){
  AFMS.begin();
  rMotor->setSpeed(150);
  rMotor->run(FORWARD);
  rMotor->run(RELEASE);
  lMotor->setSpeed(150);
  lMotor->run(FORWARD);
  lMotor->run(RELEASE);
}
